#!/bin/sh

# PackPack version
PACKVERSION=1.0.0

# Path to PackPack makefiles
PACKDIR=$(cd $(dirname "$0") && pwd)/pack

# Source directory
SOURCEDIR=${SOURCEDIR:-$PWD}

# Build directory
BUILDDIR=${BUILDDIR:-${SOURCEDIR}/build}

# Docker repository to use
DOCKER_REPO=${DOCKER_REPO:-packpack/packpack}

# Extra parameters for docker run.
PACKPACK_EXTRA_DOCKER_RUN_PARAMS="${PACKPACK_EXTRA_DOCKER_RUN_PARAMS:-}"

# Set CI variable to CI provider name
CI=""
if [ "${APPVEYOR:-}" = "True" -o "${APPVEYOR:-}" = "true" ]; then
    # https://www.appveyor.com/docs/environment-variables/
    CI="appveyor"
elif [ "${CIRCLECI:-}" = "true" ]; then
    # https://circleci.com/docs/2.0/env-vars/
    CI="circle"
elif [ "${GITHUB_ACTIONS:-}" = "true" ]; then
    # https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
    CI="github"
elif [ "${GITLAB_CI:-}" = "true" ]; then
    # https://docs.gitlab.com/ee/ci/variables/
    CI="gitlab"
elif [ "${TRAVIS:-}" = "true" ]; then
    # https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
    CI="travis"
fi

# Docker architecture
if [ -z "${ARCH}" ]; then
    # Use uname -m instead of HOSTTYPE
    case "$(uname -m)" in
        i*86) ARCH="i386" ;;
        arm*) ARCH="armhf" ;;
        x86_64) ARCH="x86_64"; ;;
        aarch64) ARCH="aarch64" ;;
        *) ARCH="${HOSTTYPE}" ;;
    esac
fi

# Docker image to use
if [ -z "${DOCKER_IMAGE}" ]; then
    if [ -n "${OS}" ] && [ -n "${DIST}" ]; then
        # Non-numeric dist, e.g. debian-sid, ubuntu-precise, etc.
        DOCKER_IMAGE="${OS}-${DIST}"
    else
        # Use ubuntu-xenial docker image if OS or DIST is invalid
        DOCKER_IMAGE=ubuntu-xenial
    fi

    if [ "${ARCH}" != "x86_64" ]; then
        DOCKER_IMAGE="${DOCKER_IMAGE}-${ARCH}"
    fi
fi

version() {
    echo "PackPack version ${PACKVERSION}"
}

usage() {
    echo "# PackPack version ${PACKVERSION}"
    echo ""
    echo "Usage: OS=ubuntu DIST=xenial $0 [TARGET..]"
    echo ""
    echo "## Available Targets"
    echo ""
    echo " * tarball - pack a source tarball"
    echo " * prepare - prepare a build directory"
    echo " * package - build packages (default)"
    echo " * clean   - remove all created files"
    echo ""
    echo "## Environment Variables"
    echo ""
    echo " * PRODUCT - the name of software product, e.g. 'tarantool'"
    echo " * ARCH - architecture, e.g i386, x86_64, armhf (${ARCH})"
    echo " * OS - the name of distribution, e.g. debian or fedora (${OS})"
    echo " * DIST - the version of distribution, e.g. xenial or 24 (${DIST})"
    echo " * BUILDDIR - directory used for out-of-source build (${BUILDDIR})"
    echo " * DOCKER_REPO - Docker repository to use (${DOCKER_REPO})"
    echo ""
    echo "See also ${PACKDIR}/config.mk"
    echo ""
    echo "The actual list of distribution is available on Docker Hub:"
    echo ""
    echo "   https://hub.docker.com/r/${DOCKER_REPO}/tags/"
    echo ""
    echo "## Documentation"
    echo ""
    echo " * See https://github.com/packpack/packpack"
    echo ""
}

case "$1" in
    -V|--version)
        version
        exit 0
    ;;
    -h|--help)
        usage
        exit 1
        ;;
    *) ;;
esac

#
# Create an entry point for Docker to allow builds from non-root user
#
mkdir -p ${BUILDDIR}

#
# docker:latest does not define $USER but has whoami
#
if [ -z "${USER}" ]; then
    USER="$(whoami)"
fi

if [ "${OS}" = "alpine" ]; then
    (
        echo "#!/bin/sh";
        echo "adduser -u $(id -u) -D $USER";
        echo "adduser $USER adm";
        echo "adduser $USER wheel";
        echo "adduser $USER abuild";
        echo "export HOME=/home/$USER" ;
        echo "su-exec $USER \$@";
    ) > ${BUILDDIR}/userwrapper.sh
else
    (
        echo "#!/bin/sh";
        echo "useradd -u $(id -u) $USER";
        echo "usermod -a -G sudo $USER 2>/dev/null || :";
        echo "usermod -a -G wheel $USER 2>/dev/null || :";
        echo "usermod -a -G adm $USER 2>/dev/null || :";
        printf 'printf "%s\\tALL=(ALL)\\tNOPASSWD: ALL\\n" >> /etc/sudoers\n' $USER
        echo "export HOME=/home/$USER" ;
        echo "exec chroot --userspec=$USER / \$@";
    ) > ${BUILDDIR}/userwrapper.sh
fi


chmod a+x ${BUILDDIR}/userwrapper.sh

#
# Save defined configuration variables to ./env file
#
env | grep -E "^PRODUCT=|^VERSION=|^RELEASE=|^ABBREV=|^DISABLE_ABBREV=" > ${BUILDDIR}/env
env | grep -E "^TARBALL_|^CHANGELOG_|^CCACHE_|^PACKAGECLOUD_" >> ${BUILDDIR}/env
env | grep -E "^SMPFLAGS=|^OS=|^DIST=" >> ${BUILDDIR}/env

#
# Pass the Alpine build SSL key to Docker for signing packages
#
if [ -n "$ABUILD_KEY" ]; then
    echo ABUILD_KEY='"'$(echo "$ABUILD_KEY" | base64)'"' >> ${BUILDDIR}/env
fi

#
# Pass variables with 'VAR_' prefix.
#
env | grep "^VAR_" >> ${BUILDDIR}/env

#
# Pass continuous interation service name.
#
echo "CI=${CI}" >> ${BUILDDIR}/env

#
# Preserve environment variables as requested by a user.
#
if [ -n "${PRESERVE_ENVVARS:-}" ]; then
    echo "PRESERVE_ENVVARS=${PRESERVE_ENVVARS}" >> ${BUILDDIR}/env
    (IFS=,; for envvar in ${PRESERVE_ENVVARS}; do
        env | grep "^${envvar}=" >> "${BUILDDIR}/env"
    done)
fi

#
# Setup cache directory
#
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/packpack"
mkdir -p "${CACHE_DIR}/ccache"

#
# Fix security context for selinux
#
chcon -Rt svirt_sandbox_file_t ${PACKDIR} ${SOURCEDIR} ${BUILDDIR} \
    1> /dev/null 2> /dev/null || :

#
# Start Docker
#
set -ex
docker pull ${DOCKER_REPO}:${DOCKER_IMAGE}
docker run \
        ${PACKPACK_EXTRA_DOCKER_RUN_PARAMS} \
        --volume "${PACKDIR}:/pack:ro" \
        --volume "${SOURCEDIR}:/source:ro" \
        --volume "${BUILDDIR}:/build" \
        --env-file ${BUILDDIR}/env \
        --workdir /source \
        --rm=true --tty=true \
        --entrypoint=/build/userwrapper.sh \
        -e XDG_CACHE_HOME=/cache \
        -e CCACHE_DIR=/cache/ccache \
        -e TMPDIR=/tmp \
        --volume "${CACHE_DIR}:/cache" \
        ${DOCKER_REPO}:${DOCKER_IMAGE} \
        make -f /pack/Makefile -C /source BUILDDIR=/build -j "$@"
retcode=$?
rm -f ${BUILDDIR}/userwrapper.sh ${BUILDDIR}/env
exit $retcode
# vim: filetype=sh tabstop=4 shiftwidth=4 softtabstop=4 expandtab
